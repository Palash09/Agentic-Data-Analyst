# Auto‑generated by generate_analysis
from pathlib import Path
CSV_PATH = Path(r"/Users/zhangran/Desktop/BP@UnitedStates/Code/D2D_Data2Dashboard/dataset/Finance_survey_data.csv")

# Auto‑generated by generate_analysis

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path

# Load the dataset
# CSV_PATH is defined above  # Replace with actual path
data = pd.read_csv(CSV_PATH)

# Ensure the figures directory exists
Path("figures").mkdir(parents=True, exist_ok=True)

# 1. Investment Preferences by Gender
try:
    investment_columns = ['Mutual_Funds', 'Equity_Market', 'Debentures', 'Government_Bonds', 'Fixed_Deposits', 'PPF', 'Gold']
    gender_investment = data.groupby('gender')[investment_columns].mean()
    gender_investment.plot(kind='bar', colormap='viridis')
    plt.title('Average Investment by Gender', fontsize=14)
    plt.xlabel('Gender', fontsize=12)
    plt.ylabel('Average Investment', fontsize=12)
    plt.xticks(rotation=0, fontsize=10)
    plt.legend(title='Investment Avenues', fontsize=10)
    plt.tight_layout()
    plt.savefig('figures/investment_by_gender.png')
    plt.show()
except (KeyError, ValueError, TypeError) as e:
    print(f"Warning: Skipped Investment Preferences by Gender due to {e}")

# 2. Age Distribution and Investment Avenues
try:
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    data['age'].plot(kind='hist', bins=7, ax=ax1, color='cividis', alpha=0.6)
    data['Investment_Avenues'].value_counts().plot(kind='bar', ax=ax2, color='plasma', alpha=0.6)
    ax1.set_title('Age Distribution and Investment Avenues', fontsize=14)
    ax1.set_xlabel('Age', fontsize=12)
    ax1.set_ylabel('Frequency', fontsize=12)
    ax2.set_ylabel('Investment Avenues Count', fontsize=12)
    ax1.tick_params(axis='x', labelsize=10)
    ax1.tick_params(axis='y', labelsize=10)
    ax2.tick_params(axis='y', labelsize=10)
    plt.tight_layout()
    plt.savefig('figures/age_distribution_investment_avenues.png')
    plt.show()
except (KeyError, ValueError, TypeError) as e:
    print(f"Warning: Skipped Age Distribution and Investment Avenues due to {e}")

# 3. Investment Monitoring Frequency
try:
    data['Invest_Monitor'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90, colormap='cividis')
    plt.title('Investment Monitoring Frequency', fontsize=14)
    plt.axis('equal')
    plt.tight_layout()
    plt.savefig('figures/investment_monitoring_frequency.png')
    plt.show()
except (KeyError, ValueError, TypeError) as e:
    print(f"Warning: Skipped Investment Monitoring Frequency due to {e}")

# 4. Savings Objectives
try:
    data['What are your savings objectives?'].value_counts().plot(kind='bar', colormap='viridis')
    plt.title('Savings Objectives', fontsize=14)
    plt.xlabel('Objective', fontsize=12)
    plt.ylabel('Count', fontsize=12)
    plt.xticks(rotation=45, fontsize=10)
    plt.tight_layout()
    plt.savefig('figures/savings_objectives.png')
    plt.show()
except (KeyError, ValueError, TypeError) as e:
    print(f"Warning: Skipped Savings Objectives due to {e}")

# 5. Expected Returns
try:
    data['Expect'].value_counts().plot(kind='bar', colormap='plasma')
    plt.title('Expected Returns', fontsize=14)
    plt.xlabel('Expected Return Range', fontsize=12)
    plt.ylabel('Count', fontsize=12)
    plt.xticks(rotation=45, fontsize=10)
    plt.tight_layout()
    plt.savefig('figures/expected_returns.png')
    plt.show()
except (KeyError, ValueError, TypeError) as e:
    print(f"Warning: Skipped Expected Returns due to {e}")